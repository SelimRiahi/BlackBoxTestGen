API Documentation:
Framework: Node.js + Express
Database: MongoDB
Default Port: 3000
Frontend Port: 3001
=== BACKEND ENDPOINTS ===

Authentication:
- POST /register
  Request: { "username": string (3-30 chars), "password": string (min 8 chars) }
  Success: 201 + user object
  Errors: 400 for validation errors

- POST /login
  Request: { "username": string, "password": string }
  Success: 200 + { "token": string }
  Errors: 401 for invalid credentials

Endpoints (require Authorization header with Bearer token):

Tasks:
- POST /tasks
  Request: { 
    "title": string (required, 3-100 chars),
    "description?": string (max 500 chars),
    "priority?": "low"|"medium"|"high",
    "dueDate?": ISO8601 date string,
    "categoryId?": ObjectId
  }
  Success: 201 + task object
  Errors:
    - 400: Validation error
    - 401: Unauthorized

- GET /tasks
  Success: 200 + [task objects] (only user's tasks)

- GET /tasks/:id
  Success: 200 + task object
  Errors: 
    - 404 if not found
    - 403 if not owner

- PATCH /tasks/:id
  Request: Partial task fields
  Success: 200 + updated task
  Errors:
    - 400: Validation error
    - 403: Not owner
    - 404: Not found

- DELETE /tasks/:id
  Success: 204
  Errors: 
    - 403: Not owner
    - 404: Not found

- GET /tasks/search?q=query
  Success: 200 + [matching tasks] (only user's tasks)

Categories:
- POST /categories
  Request: { "name": string (3-50 chars), "color?": hex string }
  Success: 201 + category object
  Errors: 400 for validation errors

- GET /categories
  Success: 200 + [category objects]

Response Headers:
- Content-Type: application/json
- X-Response-Time: <milliseconds>

=== FRONTEND SPECIFICATION ===

UI Components:
1. Auth Screen:
   - Login Form (username/password inputs, submit button)
   - Register Toggle
   - Validation error display

2. Task Dashboard:
   - Task creation form with:
     - Title (required)
     - Description
     - Priority dropdown
     - Category selector
     - Due date picker
   - Task list with:
     - Completion toggle
     - Priority indicators
     - Due date display
   - Search bar

User Flows:
1. Authentication:
   - Registration → Auto-login
   - Session persistence
   - Protected routes

2. Task Management:
   - Create → View → Edit → Delete cycle
   - Real-time updates
   - Form validation

3. Category Management:
   - Create new categories
   - Assign to tasks
   - Filter by category

=== TESTING ENDPOINTS ===
GET /test/cleanup
- Clears all test data
- Response: 200 OK

POST /test/create-test-user
- Creates test user account
- Response: 201 + {username, password, token}