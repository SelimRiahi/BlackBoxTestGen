import os
import re
import time
import hashlib
import pdfplumber
import ollama
from datetime import datetime

def extract_text_from_pdf(pdf_path):
    """
    Extrait tout le texte d‚Äôun fichier PDF (y compris les tableaux).
    """
    all_text = []
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            if text:
                all_text.append(text)
            tables = page.extract_tables()
            for table in tables:
                table_text = "\n".join([
                    "\t".join(cell if cell is not None else "" for cell in row)
                    for row in table if row
                ])
                all_text.append(table_text)
    return "\n\n".join(all_text)


def traiter_document_complet(text):
    prompt = f"""
Tu es un expert en analyse de cahiers des charges techniques. √Ä partir du texte ci-dessous, ta t√¢che est d‚Äôextraire **uniquement** les exigences fonctionnelles et non fonctionnelles, et de les formuler de mani√®re **tr√®s concise**, en te limitant √† **quelques mots clairs et standardis√©s**.

---

### Instructions :
- Ignore les exigences qui ne contiennent pas une action claire et observable, un objet ou un contexte pr√©cis, ainsi que les d√©tails n√©cessaires pour permettre la cr√©ation d‚Äôun sc√©nario de test concret.
- Ne conserve que les exigences permettant de d√©crire une interaction ou un r√©sultat observable par un utilisateur final.
- D√©cris uniquement ce que l‚Äôutilisateur peut faire, voir ou recevoir depuis l‚Äôext√©rieur du syst√®me.
- Chaque exigence fonctionnelle doit √™tre r√©sum√©e en **4 √† 8 mots maximum**, sous la forme d‚Äôune action concr√®te faite ou observ√©e par l‚Äôutilisateur.
- Utilise un vocabulaire standardis√© (ex. : ¬´ Se connecter ¬ª, ¬´ Voir les messages ¬ª, ¬´ Envoyer un message ¬ª).
- Ne d√©cris **jamais** le fonctionnement interne du syst√®me.
- √âvite toute phrase ou formulation longue, descriptive ou narrative.
- Supprime les doublons ou exigences tr√®s similaires.
- Garde uniquement les exigences **black-box**, visibles c√¥t√© utilisateur.
- Si plusieurs actions sont mentionn√©es dans une seule exigence, reformule-les en **exigences s√©par√©es, chacune avec une action unique**.
- Ignore les r√¥les administrateur, backend, base de donn√©es, traitement technique.
- Ne g√©n√®re **aucun texte explicatif**. Seulement deux listes.

---

### Format de sortie attendu :

Exigences Fonctionnelles :
1. ...
2. ...
3. ...

Exigences Non Fonctionnelles :
1. ...
2. ...
3. ...

---

Voici le texte √† analyser :
{text}
"""

    print(f"‚è±Ô∏è D√©but traitement √† {datetime.now().strftime('%H:%M:%S.%f')[:-3]}")
    response = ollama.generate(
        model="llama3.1",
        prompt=prompt,
        options={"temperature": 0}
    )
    print(f"‚úÖ Fin traitement √† {datetime.now().strftime('%H:%M:%S.%f')[:-3]}")
    return response["response"].strip()


def main():
    pdf_path = "cahier1.pdf"
    full_text = extract_text_from_pdf(pdf_path)
    result = traiter_document_complet(full_text)

    with open("test.txt", "w", encoding="utf-8") as f:
        f.write(result)

    print("üìÑ R√©sultat enregistr√© dans test.txt")


if __name__ == "__main__":
    main()
